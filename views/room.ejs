<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="theme-color" content="#ffffff">
    <meta property="og:type" content="website">
    <meta property="og:site_name" content="Edpuzzlehax">
    <meta property="og:title" content="Edpuzzlehax">
    <meta property="og:description"
        content="Get any and all the edpuzzle answers for free">
    <meta property="og:image"
        content="https://media.discordapp.net/attachments/961105604829659196/1027775283346026536/EH2.png">
    <title>Edpuzzle</title>
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-91CBMKRN8Y"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag() { dataLayer.push(arguments); }
      gtag('js', new Date());
  
      gtag('config', 'G-91CBMKRN8Y');
    </script>
    <script async defer>
     
        fetch('/test',{
            
        }).then(
         res => res.json()
        ).then(data => {
          let attemptArray = data.attempts
            console.log(data)
         data.medias.map((elm, i) => {
          let findAttemptId = elm._id
          
          let getAttemptId = data.attempts.filter(j => j.mediaId == findAttemptId)
          console.log(getAttemptId)
          let finalId = getAttemptId[0]._id
          let teacherAssignmentMediaId = getAttemptId[0].teacherAssignmentId
          
             const card = document.createElement('div')
             card.classList = 'card'
             
            card.setAttribute("onclick",`redirectLesson('${elm.teacherAssignments[0]}','${finalId}','${teacherAssignmentMediaId}')`)

             let textNode = document.createTextNode(elm.title)
             document.body.appendChild(card)
             /*card.innerHTML = `<p><h1 id='classTitles'  onclick=redirectLesson('${elm._id}')><b>${elm.title}</b></h1></p>`*/
           card.innerHTML = `<p><h1 id='classTitles'  onclick=redirectLesson('${elm.teacherAssignments[0]}','${finalId}','${teacherAssignmentMediaId}')><b>${elm.title}</b></h1></p>`


             
     
     
             elm.questions.map(i => {
                //  i.choices.map((j) => {
                //      console.log(j)
                //  })
                // const p = document.createElement('h3')
                // p.id='type_of_question'

                // const question = i.body[0].html + " " + i.type
                // p.innerHTML = `${i.body[0].html}<p id='hello'>${i.type}</p>`
                
               // // const node = document.createTextNode(i.body[0].html)
                // // p.appendChild(node)
                // //console.log(i)
                //  const ok = i.choices.filter(j => j.isCorrect == true )
                // ok.map((j) => {
                //     //console.log(j.body[0].html)
                //     //console.log(j)
                //     const l = document.createElement('p')
                //     l.innerHTML = `<b>${j.body[0].html}</b>`

                //     document.body.appendChild(l)
                // })
                
                
             })
         })
        }) // document.body.appendChild(p)
                // // const p = document.createElement('p')
                
        
        

        
        let currentId;

        if(window.location.href.startsWith('http://localhost')){
            currentId = window.location.href.slice(41)
        }
        else if(window.location.href.startsWith('https://unpuzzle.org')){
          currentId = window.location.href.slice(40)
        }
        else if(window.location.href.startsWith('https://edpuzzlehax.up.railway.app')){
            currentId = window.location.href.slice(59)
        }
        
        function redirectLesson(id, attempt_id, teacherAssignmentId){
           console.log(id)

          fetch('/edpuzzle/set_teacher_assignment_id', {
            method:"post",
            headers:{
              "Content-Type":"application/json"
            },
            body:JSON.stringify({
              teacherAssignmentMediaId: teacherAssignmentId
            })
          })

           fetch('/edpuzzle/set_attempt_id', {
            method:"post",
            headers:{
              "Content-Type":"application/json"
            },

            body: JSON.stringify({
              attempt_id: attempt_id
            })
           })
           window.location.href = `/edpuzzle/room/${currentId}/${id}` 
        }
         
     </script>
</head>
<body>
  
</body>
<style>
  @import url('https://fonts.googleapis.com/css2?family=Fredoka+One&display=swap');
    .title_vids{
        display: flex;
        flex-direction: column;
        margin: 20px;
        
        justify-content: center;
    }
    button {
        cursor: pointer;
    }
    body{
        margin: 0px;
        padding: 0px;
    }

    h3{
        color: blue;
        margin-left: 15px;
    }

    #type_of_question {
        margin-left: 15px;
    }
    
    p{
        margin-left: 15px;
    }

    #hello {
        font-style: italic;
        color: rgb(63, 61, 62);
    }


    
    .classes{
        display: flex;
        flex-direction: column;
        
  margin: 10px;
    }


    * {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Fredoka One', cursive;
            margin: 0px;
            font-weight: 100;
  
}

body {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica,
    Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    background-image: url(https://coolbackgrounds.io/images/backgrounds/index/aqua-d9b59c89.png);
    overflow-y: auto;
    overflow-x: hidden;
}

.main-container {
  padding: 30px;
}

/* HEADING */

.heading {
  text-align: center;
}

.heading__title {
  font-weight: 600;
}

.heading__credits {
  margin: 10px 0px;
  color: #888888;
  font-size: 25px;
  transition: all 0.5s;
}

.heading__link {
  text-decoration: none;
}

.heading__credits .heading__link {
  color: inherit;
}

/* CARDS */

.cards {
  display: flex;
  flex-wrap: wrap;
  
}

.card {
  padding: 20px;
  min-height: 200px;
  
  width: 100%;
  /* grid-template-rows: 20px 50px 1fr 50px; */
  border-radius: 10px;
  box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.25);
  transition: all 0.2s;
  display: flex;
  justify-content: center;
  align-items: center;
}

.card:hover {
  box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.4);
  transform: scale(1.01);
  cursor: pointer;
}

.card__link,
.card__exit,
.card__icon {
  position: relative;
  text-decoration: none;
  color: rgba(255, 255, 255, 0.9);
}

.card__link::after {
  position: absolute;
  top: 25px;
  left: 0;
  content: "";
  width: 0%;
  height: 3px;
  background-color: rgba(255, 255, 255, 0.6);
  transition: all 0.5s;
}

.card__link:hover::after {
  width: 100%;
}

.card__exit {
  grid-row: 1/2;
  justify-self: end;
}

#classTitles {
 
  
}

.card__icon {
  grid-row: 2/3;
  font-size: 30px;
}

.card__title {
  grid-row: 3/4;
  font-weight: 400;
  color: #ffffff;
}



/* CARD BACKGROUNDS */

.card-1 {
  background: radial-gradient(#1fe4f5, #3fbafe);
}


/* RESPONSIVE */

@media (max-width: 1600px) {
  .cards {
    justify-content: center;
  }
}
</style>
<body>
</body>


</html>