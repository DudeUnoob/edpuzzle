<!DOCTYPE html>
<html lang=`en`>
<head>
    <meta charset=`UTF-8`>
    <meta http-equiv=`X-UA-Compatible` content=`IE=edge`>
    <meta name=`viewport` content=`width=device-width, initial-scale=1.0`>
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="theme-color" content="#ffffff">
    <meta property="og:type" content="website">
    <meta property="og:site_name" content="Edpuzzlehax">
    <meta property="og:title" content="Edpuzzlehax">
    <meta property="og:description"
        content="Get any and all the edpuzzle answers for free">
    <meta property="og:image"
        content="https://media.discordapp.net/attachments/961105604829659196/1027775283346026536/EH2.png">
    <title>Document</title>

    <style>
         @import url('https://fonts.googleapis.com/css2?family=Fredoka+One&display=swap');
        h3 {
            color: blue;
            text-decoration: underline;
            font-weight: 100;
        }

        * {
            font-family: 'Fredoka One', cursive;
            margin: 0px;
        }
       #helloworld {
        color: red;
        font-weight: 100;
       }

       body{
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica,
    Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    background-image: url(https://coolbackgrounds.io/images/backgrounds/index/aqua-d9b59c89.png);
       }
       .card {
        /* border-style: none;
            cursor: pointer;
            border-radius: 5px;
             box-shadow: 10px 10px 15px -1px rgba(34, 33, 33, 0.74);
            -webkit-box-shadow: 10px 10px 15px -1px rgba(34, 33, 33, 0.74);
            -moz-box-shadow: 10px 10px 15px -1px rgba(34, 33, 33, 0.74);
            box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
            transition: 0.3s;
            padding: 5px;  */

            margin: 20px;
  padding: 20px;
  justify-content: center;
  background: radial-gradient(#1fe4f5, #3fbafe);
  display: flex;
  flex-direction: column;
  border-radius: 10px;
  transition: all 0.2s;
  
       }
       .card:hover {
            /* box-shadow: 0 12px 16px 0 rgba(255, 255, 255, 0.24), 0 17px 50px 0 rgba(255, 254, 254, 0.19); */
            border-radius: 10px;
  box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.25);
  transition: all 0.2s;
  cursor: pointer;
        }

        @media (max-width: 1600px) {
  .cards {
    justify-content: center;
  }
}
    </style>
</head>
<body>
    
</body>
<script>
    let lesson_id;
    fetch('/lesson_id').then(res => res.json()).then(data => {
        lesson_id = data.lesson_id})
    fetch('/test2').then(res => res.json()).then(data => {
        
       //const filter = data.medias.filter(i => i._id = lesson_id)
       //console.log(filter)
       data.medias.map((elm) => {
        const div = document.createElement('div')
        div.className = 'card'
        
        if(elm._id == lesson_id){
            

            elm.questions.map((i) => {
                
                const div = document.createElement('div')
                div.classList = 'card'

                //console.log(elm)
                
                const p = document.createElement('h3')
                p.id='type_of_question'
                //const question = i.body[0].html + ` ` + i.type
                p.innerHTML = `${i.body[0].html}<p id='hello'>${i.type}</p>`
                
                div.appendChild(p)
                
                
                if(i.type == 'open-ended'){
                    i.body.map((o) => {
                        console.log(o)
                        p.id = 'type_of_question'

                        p.innerHTML = `${o.html}<p id='hello'>${i.type}</p>`

                        div.appendChild(p)

                        document.body.appendChild(div)
                    })
                } else {
                    const ok = i.choices.filter(j => j.isCorrect == true)
                 //console.log(ok)
                 if(ok.length > 0){
                    ok.map((j) => {
                    
                    const l = document.createElement('p')
                    l.innerHTML = `<b id='helloworld'>${j.body[0].html}</b>`
                    //document.body.appendChild(l)
                    div.appendChild(l)
                    document.body.appendChild(div)
                })
                 } 
                }
                    
                
                 
                    
                
            })
        } else {
            return
        }
       })
    })
</script>
</html>